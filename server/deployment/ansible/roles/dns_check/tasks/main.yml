---
# server/deployment/ansible/roles/dns_check/tasks/main.yml

# Task to get the server's public IP and store it in 'server_ip'
- name: Get server's public IP
  set_fact:
    server_ip: "{{ ansible_default_ipv4.address }}"
  # Explanation:
  # - Uses 'ansible_default_ipv4.address' to capture the server's primary IPv4 address.
  # - This is generally more reliable than 'ansible_host' for determining the server's IP.

# Task to log the server's IP for verification
- name: Debug server_ip
  debug:
    msg: "Server IP is set to: {{ server_ip }}"
  # Explanation:
  # - Logs the value of 'server_ip' to ensure it has been captured correctly.

# Task to retrieve all application subdomains and store them in 'app_subdomains'
- name: Retrieve all application subdomains
  set_fact:
    app_subdomains: "{{ applications | dict2items | map(attribute='value.subdomain') | list }}"
  # Explanation:
  # - Extracts subdomains from the 'applications' dictionary.
  # - Converts the dictionary to a list of items and maps to get the 'subdomain' attribute.
  # - Stores the list in 'app_subdomains' for iterating in subsequent tasks.

# Task block to check DNS records for each subdomain
- name: Check DNS records for each subdomain
  block:
    # Task to get the subdomain IP from DNS using the 'dig' command
    - name: Get subdomain IP from DNS
      command: "dig +short {{ item }} A"
      register: subdomain_ip
      changed_when: false
      delegate_to: "{{ inventory_hostname }}"  # Ensuring it runs on the target server
      become: false
      loop: "{{ app_subdomains }}"
      loop_control:
        label: "{{ item }}"
      # Explanation:
      # - Executes the 'dig' command to retrieve the A record for each subdomain.
      # - Runs on the target server to align with where ping succeeds.
      # - Registers the output in 'subdomain_ip' for further processing.

    # Task to log the DNS configuration status for each subdomain
    - name: Log DNS configuration status
      debug:
        msg: "DNS check for {{ item.item }}: {{ (item.stdout_lines | default([])) | first | default('no IP') }}"
      loop: "{{ subdomain_ip.results }}"
      loop_control:
        label: "{{ item.item }}"
      # Explanation:
      # - Logs the current DNS resolution status for each subdomain.
      # - Displays the first line of the 'dig' output or 'no IP' if empty.

    # Task to log DNS configuration requirement if the IP is incorrect
    - name: Log DNS configuration requirement if incorrect
      debug:
        msg: |
          ACTION REQUIRED: Please update your DNS records
          Add an A record for {{ item.item }} pointing to {{ server_ip }}
          Current DNS resolves to: {{ (item.stdout_lines | default([])) | first | default('no IP') }}
      when: (item.stdout_lines | first | default('')) != server_ip
      loop: "{{ subdomain_ip.results }}"
      loop_control:
        label: "{{ item.item }}"
      # Explanation:
      # - Checks if the resolved IP does not match the server's IP.
      # - If mismatched, logs an action required message to update DNS records accordingly.
      # - Updated the 'when' condition to safely handle empty 'stdout_lines' by providing a default empty string.

    # Task to wait for DNS propagation to reflect the correct IP
    - name: Wait for DNS propagation
      command: "dig +short {{ item.item }} A"
      register: dns_check
      until: server_ip in dns_check.stdout_lines
      retries: "{{ dns_check_retries | default(10) }}"
      delay: "{{ dns_check_delay | default(30) }}"
      changed_when: false
      delegate_to: "{{ inventory_hostname }}"
      become: false
      when: (item.stdout_lines | first | default('')) != server_ip
      loop: "{{ subdomain_ip.results }}"
      loop_control:
        label: "{{ item.item }}"
      # Explanation:
      # - Repeatedly executes 'dig' to check if the DNS record has been updated to the correct IP.
      # - Continues until the resolved IP matches 'server_ip' or the retry limit is reached.
      # - Uses 'in' to handle cases where multiple IPs might be returned.
      # - Defaults for retries and delay are set to 10 and 30 seconds respectively if not defined.
      # - Updated the 'when' condition to safely handle empty 'stdout_lines' by providing a default empty string.

    # Task to log the result after DNS propagation
    - name: Log DNS propagation result
      debug:
        msg: "DNS propagation for {{ item.item }} has completed. Current IP: {{ (dns_check.stdout_lines | default([])) | first | default('no IP') }}"
      when: dns_check is defined and server_ip in (dns_check.stdout_lines | default([]))
      loop: "{{ subdomain_ip.results }}"
      loop_control:
        label: "{{ item.item }}"
      # Explanation:
      # - Logs the successful DNS resolution after propagation.
      # - Ensures that dns_check is defined before accessing stdout_lines to prevent errors.
      # - Uses 'default([])' to provide an empty list if 'stdout_lines' is undefined.

    # Task to log failure if DNS propagation does not complete
    - name: Log DNS propagation failure
      debug:
        msg: "DNS propagation for {{ item.item }} failed. Expected IP: {{ server_ip }}, but got: {{ (dns_check.stdout_lines | default([])) | first | default('no IP') }}"
      when: dns_check is defined and server_ip not in (dns_check.stdout_lines | default([]))
      loop: "{{ subdomain_ip.results }}"
      loop_control:
        label: "{{ item.item }}"
      # Explanation:
      # - Logs a failure message if DNS propagation does not reflect the correct IP after retries.
      # - Ensures that dns_check is defined before accessing stdout_lines to prevent errors.
      # - Uses 'default([])' to provide an empty list if 'stdout_lines' is undefined.

  # Additional Explanation:
  # - Adjusted the 'until' and 'when' conditions to safely handle cases where 'stdout_lines' might be empty.
  # - Replaced '(item.stdout_lines | default([])) | first' with '(item.stdout_lines | first | default(''))' to ensure a default value is always present.
  # - This prevents errors when 'dig' returns no IP, avoiding attempts to access a non-existent first item.
  # - Maintained executing DNS checks on the target server using 'delegate_to'.
  # - Continued to use detailed comments for clarity and maintainability.

# Optional: Define defaults for retries and delay if not set elsewhere
- name: Set default DNS check retries and delay
  set_fact:
    dns_check_retries: 12
    dns_check_delay: 15
  when: dns_check_retries is not defined or dns_check_delay is not defined
  # Explanation:
  # - Sets default values for retries and delay if they are not defined previously.
  # - Ensures the 'Wait for DNS propagation' task has the necessary parameters.