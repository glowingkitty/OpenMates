name: openmates-server
version: '3.8'

# TODO add container manager docker (to start/stop apps containers, receiving api calls from the rest api, so rest api has no access to docker socket)
# TODO add web app and website dockers
# TODO get updated structure to work again
# TODO add improved security (no root user, only access to folders they really need, seperate networks, no linux commands that aren't needed, no internet if not needed,
# only read access to files if possible, limit cpu/memory usage, strapi input parameterized, turn off strapi interface (except when in development mode) etc. etc.)

services:
  ###########################################################################################
  ##### REST API
  ###########################################################################################

  # The REST API, used by the web application, the task management, the apps and external developers using the OpenMates API
  rest-api:
    container_name: rest-api
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file: .env
    environment:
      PYTHONPATH: "/usr/src/app"
      REST_API_PORT: ${REST_API_PORT}
      CMS_URL: "http://cms:${CMS_PORT}"
      CMS_TOKEN: ${CMS_TOKEN}
      DRAGONFLY_URL: "in_memory_database:${DRAGONFLY_PORT}"
      WEB_BROWSER_URL: "http://app-web:${WEB_BROWSER_PORT}"
      WEB_BROWSER_SECRET_KEY: ${WEB_BROWSER_SECRET_KEY}
      CONTAINER_MANAGER_URL: "http://container-manager:${CONTAINER_MANAGER_PORT}"
      CONTAINER_MANAGER_SECRET_KEY: ${CONTAINER_MANAGER_SECRET_KEY}
    command: >
      sh -c "python /usr/src/app/server/server_config_check.py && 
             python -c 'import sys; print(sys.path)' &&  # Debug print
             uvicorn api:app --host 0.0.0.0 --port ${REST_API_PORT}"
    ports:
      - "${REST_API_PORT}:${REST_API_PORT}"
    volumes:
      - .:/usr/src/app/server
    networks:
      - openmates
    depends_on:
      - cms
      - in_memory_database


  ###########################################################################################
  ##### Web application
  ###########################################################################################

  # The web application for OpenMates, which will be used by the users and connects to the REST API
  # TODO


  ###########################################################################################
  ##### Website
  ###########################################################################################

  # The website for OpenMates, which will be used to promote the OpenMates project and explain what it is
  # TODO


  ###########################################################################################
  ##### Container manager
  ###########################################################################################

  # The container manager, which will be used to manage the "Apps" containers (Web, Discord Listener, Mosquitto, etc.)
  # TODO try to limit this container manager to access only the dockers it created itself, not the other dockers in the docker compose setup
  container-manager:
    container_name: container-manager
    build:
      context: ./container_manager
      dockerfile: Dockerfile
    volumes:
      - ./:/usr/src/app/server
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file: .env
    environment:
      CONTAINER_MANAGER_SECRET_KEY: ${CONTAINER_MANAGER_SECRET_KEY}
      CONTAINER_MANAGER_PORT: ${CONTAINER_MANAGER_PORT}
    networks:
      - openmates


  ###########################################################################################
  ##### Task management
  ###########################################################################################

  # The task worker (for processing tasks that take longer then just milliseconds)
  task-worker:
    container_name: task-worker
    build:
      context: .
      dockerfile: task_manager/Dockerfile
    env_file: .env
    environment:
      PYTHONPATH: "/usr/src/app"
      CMS_URL: "http://cms:${CMS_PORT}"
      CMS_TOKEN: ${CMS_TOKEN}
      DRAGONFLY_URL: "in_memory_database:${DRAGONFLY_PORT}"
    command: >
      sh -c "python /usr/src/app/server/server_config_check.py && 
             celery -A server.task_manager.task_manager worker --loglevel=info --uid=nobody"
    volumes:
      - .:/usr/src/app/server
    networks:
      - openmates
    depends_on:
      - rest-api
      - in_memory_database

  # The task scheduler (for scheduling tasks into the future)
  task-scheduler:
    container_name: task-scheduler
    build:
      context: .
      dockerfile: task_manager/Dockerfile
    env_file: .env
    environment:
      PYTHONPATH: "/usr/src/app"
      CMS_URL: "http://cms:${CMS_PORT}"
      CMS_TOKEN: ${CMS_TOKEN}
      DRAGONFLY_URL: "in_memory_database:${DRAGONFLY_PORT}"
    command: >
      sh -c "python /usr/src/app/server/server_config_check.py && 
             celery -A server.task_manager.task_manager beat --loglevel=info --uid=nobody"
    volumes:
      - .:/usr/src/app/server
    networks:
      - openmates
    depends_on:
      - rest-api
      - in_memory_database


  ###########################################################################################
  ##### Databases & Data management
  ###########################################################################################

  # The content management system (CMS)
  cms:
    container_name: cms
    build:
      context: ./cms/strapi
      dockerfile: Dockerfile
    image: cms:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: cms_database
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./cms/strapi/config:/opt/app/config
      - ./cms/strapi/src:/opt/app/src
      - ./cms/strapi/package.json:/opt/package.json
      - ./cms/strapi/yarn.lock:/opt/yarn.lock
      - ./cms/strapi/.env:/opt/app/.env
      - ./cms/strapi/public/uploads:/opt/app/public/uploads
    ports:
      - "${CMS_PORT}:${CMS_PORT}"
    networks:
      - openmates
    depends_on:
      - cms_database

  # The database for the content management system (CMS)
  cms_database:
    container_name: cms-database
    restart: unless-stopped
    env_file: .env
    image: postgres:12.0-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - cms-data:/var/lib/postgresql/data/
    networks:
      - openmates

  # The in-memory database (for storing data that needs to be accessed very quickly)
  in_memory_database:
    container_name: in-memory-database
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    ulimits:
      memlock: -1
    ports:
      - "${DRAGONFLY_PORT}:${DRAGONFLY_PORT}"
    volumes:
      - in-memory-data:/data
    command:
      - "--maxmemory"
      - "3000mb"
    deploy:
      resources:
        limits:
          memory: 2.5G
    networks:
      - openmates

##########################################################################################
# Networks
##########################################################################################

networks:
  # The network for the different containers to communicate with each other
  openmates:


##########################################################################################
# Volumes
##########################################################################################

volumes:
  # The data for the content management system (CMS)
  cms-data:
  # The data for the in-memory database
  in-memory-data: